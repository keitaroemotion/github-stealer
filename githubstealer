#!/usr/bin/env python

#
# usage
# 
# githubstealer [name or url]
#
# Then retrieves (clones) all the related github repositories in ./[name]/*
#

from bs4                             import BeautifulSoup
from concurrent                      import futures
from os.path                         import expanduser
from selenium                        import webdriver
from selenium.common.exceptions      import NoSuchElementException        
from selenium.webdriver.common.by    import By
from selenium.webdriver.common.alert import Alert
from selenium.webdriver.support.ui   import Select
from selenium.webdriver.support.ui   import WebDriverWait
from selenium.webdriver.support      import expected_conditions as ec
import os
import re
import sys
import threading
import time

def click(driver, key):
    print("clicking ... {}".format(key))
    driver                                 \
        .find_element_by_css_selector(key) \
        .click()

def get_option(headless):
    options = webdriver.ChromeOptions()
    if headless == True:
        options.add_argument('--headless')
    return options

headless = "--headless" in sys.argv
driver   = webdriver.Chrome(
               "./drivers/chromedriver78", # XXX needs to be fixed
               options=get_option(headless)
           )
wait     = WebDriverWait(driver, 7)

args = [x for x in sys.argv[1:] if x.startswith('https://github.com/')]

if len(args) == 0:
    print("\nURL required.\n\n")
    sys.exit()

url = re.search('https://[^/]+/[^/]+', args[0])

if not url:
    print("\nURL not found.\n\n")
    sys.exit()

user = url.group(0).replace("https://github.com/", "")
url  = "{}?tab=repositories".format(url.group(0))
driver.get(url)

repos = []

def collect(page_counter):
    if(page_counter == 0):
        return

    source = driver.page_source.encode('utf-8')
    for line in source.split('\n'):
        match = re.search("/{}/[^/^\"]+".format(user), line)
        if match and (not match.group(0) in repos):
            repos.append(match.group(0))
            print(match.group(0))
    if 'btn btn-outline BtnGroup-item' in source:
        click(driver, 'a.btn.btn-outline.BtnGroup-item')
        time.sleep(3)
        collect(page_counter - 1)

collect(3)

def sample_func(index, user):
    os.system(
           "git clone git@github.com:{}.git {}"
               .format(
                   repos[index],
                   repos[index]
               )
       )

future_list = []
with futures.ThreadPoolExecutor(max_workers=20) as executor:
    for i in range(len(repos)):
        future = executor.submit(fn=sample_func, index=i, user=user)
        future_list.append(future)
    _ = futures.as_completed(fs=future_list)
